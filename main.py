import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from utils import load_data, calculate_statistics, create_correlation_matrix
from PIL import Image

# Configuration de la page
st.set_page_config(
    page_title="Smoke Detection Analysis",
    page_icon="üî•",
    layout="wide"
)

# Language selector
lang = st.sidebar.selectbox('Language / Langue', ['Fran√ßais', 'English'])

# Translations dictionary
translations = {
    'Fran√ßais': {
        'title': "üî• Syst√®me d'Analyse de D√©tection de Fum√©e",
        'intro': """
## Introduction
Bienvenue dans l'application d'analyse des donn√©es de d√©tection de fum√©e. Ce syst√®me utilise des capteurs IoT 
pour surveiller en temps r√©el diff√©rents param√®tres environnementaux afin de d√©tecter les risques d'incendie.

### Param√®tres surveill√©s :
- Temp√©rature et Humidit√©
- Compos√©s organiques volatils (TVOC)
- Niveaux de CO2
- Particules fines (PM1.0, PM2.5)
- Pression atmosph√©rique
""",
        'key_viz': "üéØ Visualisations Cl√©s",
        'correlation': "Matrice de Corr√©lation entre Variables",
        'temp_dist': "Distribution de la Temp√©rature selon l'Alarme",
        'co2_dist': "Distribution du CO2 selon l'Alarme",
        'interactive_viz': "üìà Visualisations Interactives",
        'select_param': "S√©lectionner un param√®tre √† visualiser",
        'evolution': "√âvolution de",
        'created_by': "üë©‚Äçüíª Cr√©√© par Harras Houda",
        'footer': """
Cette application d'analyse de donn√©es de d√©tection de fum√©e a √©t√© d√©velopp√©e pour fournir 
une visualisation claire et interactive des donn√©es collect√©es par les capteurs IoT.
"""
    },
    'English': {
        'title': "üî• Smoke Detection Analysis System",
        'intro': """
## Introduction
Welcome to the smoke detection data analysis application. This system uses IoT sensors 
to monitor various environmental parameters in real-time to detect fire risks.

### Monitored Parameters:
- Temperature and Humidity
- Volatile Organic Compounds (TVOC)
- CO2 Levels
- Fine Particles (PM1.0, PM2.5)
- Atmospheric Pressure
""",
        'key_viz': "üéØ Key Visualizations",
        'correlation': "Correlation Matrix between Variables",
        'temp_dist': "Temperature Distribution by Alarm",
        'co2_dist': "CO2 Distribution by Alarm",
        'interactive_viz': "üìà Interactive Visualizations",
        'select_param': "Select a parameter to visualize",
        'evolution': "Evolution of",
        'created_by': "üë©‚Äçüíª Created by Harras Houda",
        'footer': """
This smoke detection data analysis application was developed to provide 
clear and interactive visualization of data collected by IoT sensors.
"""
    }
}

# Get translations for current language
t = translations[lang]

# Title
st.title(t['title'])
st.markdown(t['intro'])

# Key Visualizations Section
st.header(t['key_viz'])

try:
    # Loading images
    st.subheader(t['correlation'])
    st.image('attached_assets/file-YCRkd6pDqgpS2cKkvKTJhS.webp', use_container_width=True)

    st.subheader(t['temp_dist'])
    st.image('attached_assets/file-CCx1Pq16t3EYdpHNmNTCNm.webp', use_container_width=True)

    st.subheader(t['co2_dist'])
    st.image('attached_assets/file-NDG28w88p4SPpFhWCDyrAm.webp', use_container_width=True)
except Exception as e:
    st.error(f"Error loading images: {str(e)}")

try:
    # Loading data
    data = load_data('attached_assets/smoke_detection_iot.csv')

    # Interactive visualizations
    st.header(t['interactive_viz'])

    params = ["Temperature[C]", "Humidity[%]", "TVOC[ppb]", "eCO2[ppm]",
              "Raw H2", "Raw Ethanol", "Pressure[hPa]", "PM1.0", "PM2.5"]

    param = st.selectbox(t['select_param'], params)

    fig = px.line(data, x='datetime', y=param, color='Fire Alarm',
                  title=f"{t['evolution']} {param}")
    st.plotly_chart(fig, use_container_width=True)

except Exception as e:
    st.error(f"Error loading or processing data: {str(e)}")

# Footer with signature
st.markdown("---")
st.markdown(t['created_by'])
st.markdown(t['footer'])
